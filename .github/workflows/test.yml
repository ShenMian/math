name: Test

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest] # windows-latest
        type: [debug, release]

    name: ${{matrix.os}}-${{matrix.type}}
    runs-on: ${{matrix.os}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup clang (Windows)
        if: matrix.os == 'windows-latest'
        run: echo "PATH=$PATH:C:/msys64/mingw64/bin" >> $GITHUB_ENV

      - name: Setup ninja (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install ninja-build

      - name: Setup cppkg
        run: cargo install --git https://github.com/ShenMian/cppkg

      - name: Build (Debug)
        if: matrix.type == 'debug'
        run: cppkg build

      - name: Build (Release)
        if: matrix.type == 'release'
        run: cppkg build -r

      # - name: Configure CMake
      #   run: cmake -DCMAKE_BUILD_TYPE=${{matrix.type}} -B "${{github.workspace}}/target"
      #
      # - name: Build
      #   run: cmake --build "${{github.workspace}}/target" --config ${{matrix.type}}

      - name: Test
        run: ${{github.workspace}}/target/${{matrix.type}}/math_unit_test --reporters=junit --out=${{github.workspace}}/target/${{matrix.type}}/report.xml

      - name: Benchmark (Release)
        if: matrix.type == 'release'
        run: ${{github.workspace}}/target/${{matrix.type}}/math_unit_test -ns -ts=benchmark

      - name: Test Reporter
        uses: dorny/test-reporter@v1.6.0
        if: success() || failure()
        with:
          name: tests report (${{matrix.os}}-${{matrix.type}})
          path: report.xml
          working-directory: ${{github.workspace}}/target/${{matrix.type}}
          reporter: java-junit

      - name: Setup coverage report generator (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install gcovr

      - name: Setup coverage report generator (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install OpenCppCoverage -y
          echo "C:/Program Files/OpenCppCoverage" >> $env:GITHUB_PATH

      # - name: Generate coverage report (Ubuntu)
      #   if: matrix.os == 'ubuntu-latest'
      #   run: gcovr -r $GITHUB_WORKSPACE -x $GITHUB_WORKSPACE/target/coverage.out -s -f "${{github.workspace}}/include" -f "${{github.workspace}}\tests" ${{ matrix.platform.gcovr_options }} $GITHUB_WORKSPACE

      - name: Generate coverage report (Windows)
        if: matrix.os == 'windows-latest'
        run: OpenCppCoverage.exe --sources "${{github.workspace}}" --export_type cobertura:coverage_report.xml -- "${{github.workspace}}/target/${{matrix.build_type}}/math_unit_test.exe"

      - name: Upload coverage report to Codecov (Windows)
        if: matrix.os == 'windows-latest'
        uses: codecov/codecov-action@v3.1.1
        with:
          files: ./coverage_report.xml
          fail_ci_if_error: true
